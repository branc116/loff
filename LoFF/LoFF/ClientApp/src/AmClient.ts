/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AmClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getFlightOffers(paramz: Paramz): Promise<FlightOffers> {
        let url_ = this.baseUrl + "/v1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(paramz);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFlightOffers(_response);
        });
    }

    protected processGetFlightOffers(response: Response): Promise<FlightOffers> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FlightOffers.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlightOffers>(<any>null);
    }

    getMetaData(): Promise<MetaData[]> {
        let url_ = this.baseUrl + "/v1/meta";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMetaData(_response);
        });
    }

    protected processGetMetaData(response: Response): Promise<MetaData[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MetaData.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MetaData[]>(<any>null);
    }
}

export class WeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(<any>null);
    }
}

export class FlightOffers implements IFlightOffers {
    data?: FlightOffer[] | undefined;
    dictionaries?: Dictionaries | undefined;
    meta?: Meta | undefined;
    warnings?: Issue[] | undefined;

    constructor(data?: IFlightOffers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FlightOffer.fromJS(item));
            }
            this.dictionaries = _data["dictionaries"] ? Dictionaries.fromJS(_data["dictionaries"]) : <any>undefined;
            this.meta = _data["meta"] ? Meta.fromJS(_data["meta"]) : <any>undefined;
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(Issue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FlightOffers {
        data = typeof data === 'object' ? data : {};
        let result = new FlightOffers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["dictionaries"] = this.dictionaries ? this.dictionaries.toJSON() : <any>undefined;
        data["meta"] = this.meta ? this.meta.toJSON() : <any>undefined;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFlightOffers {
    data?: FlightOffer[] | undefined;
    dictionaries?: Dictionaries | undefined;
    meta?: Meta | undefined;
    warnings?: Issue[] | undefined;
}

export class FlightOffer implements IFlightOffer {
    type?: string | undefined;
    id?: string | undefined;
    offerItems?: OfferItem[] | undefined;

    constructor(data?: IFlightOffer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.id = _data["id"];
            if (Array.isArray(_data["offerItems"])) {
                this.offerItems = [] as any;
                for (let item of _data["offerItems"])
                    this.offerItems!.push(OfferItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FlightOffer {
        data = typeof data === 'object' ? data : {};
        let result = new FlightOffer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["id"] = this.id;
        if (Array.isArray(this.offerItems)) {
            data["offerItems"] = [];
            for (let item of this.offerItems)
                data["offerItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFlightOffer {
    type?: string | undefined;
    id?: string | undefined;
    offerItems?: OfferItem[] | undefined;
}

export class OfferItem implements IOfferItem {
    services?: Service[] | undefined;
    price?: Price | undefined;
    pricePerAdult?: Price | undefined;
    pricePerInfant?: Price | undefined;
    pricePerChild?: Price | undefined;
    pricePerSenior?: Price | undefined;

    constructor(data?: IOfferItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["services"])) {
                this.services = [] as any;
                for (let item of _data["services"])
                    this.services!.push(Service.fromJS(item));
            }
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            this.pricePerAdult = _data["pricePerAdult"] ? Price.fromJS(_data["pricePerAdult"]) : <any>undefined;
            this.pricePerInfant = _data["pricePerInfant"] ? Price.fromJS(_data["pricePerInfant"]) : <any>undefined;
            this.pricePerChild = _data["pricePerChild"] ? Price.fromJS(_data["pricePerChild"]) : <any>undefined;
            this.pricePerSenior = _data["pricePerSenior"] ? Price.fromJS(_data["pricePerSenior"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OfferItem {
        data = typeof data === 'object' ? data : {};
        let result = new OfferItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item.toJSON());
        }
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["pricePerAdult"] = this.pricePerAdult ? this.pricePerAdult.toJSON() : <any>undefined;
        data["pricePerInfant"] = this.pricePerInfant ? this.pricePerInfant.toJSON() : <any>undefined;
        data["pricePerChild"] = this.pricePerChild ? this.pricePerChild.toJSON() : <any>undefined;
        data["pricePerSenior"] = this.pricePerSenior ? this.pricePerSenior.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOfferItem {
    services?: Service[] | undefined;
    price?: Price | undefined;
    pricePerAdult?: Price | undefined;
    pricePerInfant?: Price | undefined;
    pricePerChild?: Price | undefined;
    pricePerSenior?: Price | undefined;
}

export class Service implements IService {
    segments?: Segment[] | undefined;

    constructor(data?: IService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["segments"])) {
                this.segments = [] as any;
                for (let item of _data["segments"])
                    this.segments!.push(Segment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Service {
        data = typeof data === 'object' ? data : {};
        let result = new Service();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.segments)) {
            data["segments"] = [];
            for (let item of this.segments)
                data["segments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IService {
    segments?: Segment[] | undefined;
}

export class Segment implements ISegment {
    flightSegment?: FlightSegment | undefined;
    pricingDetailPerAdult?: PricingDetail | undefined;
    pricingDetailPerInfant?: PricingDetail | undefined;
    pricingDetailPerChild?: PricingDetail | undefined;
    pricingDetailPerSenior?: PricingDetail | undefined;

    constructor(data?: ISegment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flightSegment = _data["flightSegment"] ? FlightSegment.fromJS(_data["flightSegment"]) : <any>undefined;
            this.pricingDetailPerAdult = _data["pricingDetailPerAdult"] ? PricingDetail.fromJS(_data["pricingDetailPerAdult"]) : <any>undefined;
            this.pricingDetailPerInfant = _data["pricingDetailPerInfant"] ? PricingDetail.fromJS(_data["pricingDetailPerInfant"]) : <any>undefined;
            this.pricingDetailPerChild = _data["pricingDetailPerChild"] ? PricingDetail.fromJS(_data["pricingDetailPerChild"]) : <any>undefined;
            this.pricingDetailPerSenior = _data["pricingDetailPerSenior"] ? PricingDetail.fromJS(_data["pricingDetailPerSenior"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Segment {
        data = typeof data === 'object' ? data : {};
        let result = new Segment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flightSegment"] = this.flightSegment ? this.flightSegment.toJSON() : <any>undefined;
        data["pricingDetailPerAdult"] = this.pricingDetailPerAdult ? this.pricingDetailPerAdult.toJSON() : <any>undefined;
        data["pricingDetailPerInfant"] = this.pricingDetailPerInfant ? this.pricingDetailPerInfant.toJSON() : <any>undefined;
        data["pricingDetailPerChild"] = this.pricingDetailPerChild ? this.pricingDetailPerChild.toJSON() : <any>undefined;
        data["pricingDetailPerSenior"] = this.pricingDetailPerSenior ? this.pricingDetailPerSenior.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISegment {
    flightSegment?: FlightSegment | undefined;
    pricingDetailPerAdult?: PricingDetail | undefined;
    pricingDetailPerInfant?: PricingDetail | undefined;
    pricingDetailPerChild?: PricingDetail | undefined;
    pricingDetailPerSenior?: PricingDetail | undefined;
}

export class FlightSegment implements IFlightSegment {
    departure?: FlightEndPoint | undefined;
    arrival?: FlightEndPoint | undefined;
    carrierCode?: string | undefined;
    number?: string | undefined;
    aircraft?: AircraftEquipment | undefined;
    operating?: OperatingFlight | undefined;
    duration?: string | undefined;
    stops?: FlightStop[] | undefined;

    constructor(data?: IFlightSegment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.departure = _data["departure"] ? FlightEndPoint.fromJS(_data["departure"]) : <any>undefined;
            this.arrival = _data["arrival"] ? FlightEndPoint.fromJS(_data["arrival"]) : <any>undefined;
            this.carrierCode = _data["carrierCode"];
            this.number = _data["number"];
            this.aircraft = _data["aircraft"] ? AircraftEquipment.fromJS(_data["aircraft"]) : <any>undefined;
            this.operating = _data["operating"] ? OperatingFlight.fromJS(_data["operating"]) : <any>undefined;
            this.duration = _data["duration"];
            if (Array.isArray(_data["stops"])) {
                this.stops = [] as any;
                for (let item of _data["stops"])
                    this.stops!.push(FlightStop.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FlightSegment {
        data = typeof data === 'object' ? data : {};
        let result = new FlightSegment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departure"] = this.departure ? this.departure.toJSON() : <any>undefined;
        data["arrival"] = this.arrival ? this.arrival.toJSON() : <any>undefined;
        data["carrierCode"] = this.carrierCode;
        data["number"] = this.number;
        data["aircraft"] = this.aircraft ? this.aircraft.toJSON() : <any>undefined;
        data["operating"] = this.operating ? this.operating.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        if (Array.isArray(this.stops)) {
            data["stops"] = [];
            for (let item of this.stops)
                data["stops"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFlightSegment {
    departure?: FlightEndPoint | undefined;
    arrival?: FlightEndPoint | undefined;
    carrierCode?: string | undefined;
    number?: string | undefined;
    aircraft?: AircraftEquipment | undefined;
    operating?: OperatingFlight | undefined;
    duration?: string | undefined;
    stops?: FlightStop[] | undefined;
}

export class FlightEndPoint implements IFlightEndPoint {
    iataCode?: string | undefined;
    terminal?: string | undefined;
    at?: Date | undefined;

    constructor(data?: IFlightEndPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iataCode = _data["iataCode"];
            this.terminal = _data["terminal"];
            this.at = _data["at"] ? new Date(_data["at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FlightEndPoint {
        data = typeof data === 'object' ? data : {};
        let result = new FlightEndPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iataCode"] = this.iataCode;
        data["terminal"] = this.terminal;
        data["at"] = this.at ? this.at.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IFlightEndPoint {
    iataCode?: string | undefined;
    terminal?: string | undefined;
    at?: Date | undefined;
}

export class AircraftEquipment implements IAircraftEquipment {
    code?: string | undefined;

    constructor(data?: IAircraftEquipment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AircraftEquipment {
        data = typeof data === 'object' ? data : {};
        let result = new AircraftEquipment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface IAircraftEquipment {
    code?: string | undefined;
}

export class OperatingFlight implements IOperatingFlight {
    carrierCode?: string | undefined;
    number?: string | undefined;

    constructor(data?: IOperatingFlight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carrierCode = _data["carrierCode"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): OperatingFlight {
        data = typeof data === 'object' ? data : {};
        let result = new OperatingFlight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrierCode"] = this.carrierCode;
        data["number"] = this.number;
        return data; 
    }
}

export interface IOperatingFlight {
    carrierCode?: string | undefined;
    number?: string | undefined;
}

export class FlightStop implements IFlightStop {
    iataCode?: string | undefined;
    newAircraft?: AircraftEquipment | undefined;
    duration?: string | undefined;
    arrivalAt?: Date | undefined;
    departureAt?: Date | undefined;

    constructor(data?: IFlightStop) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iataCode = _data["iataCode"];
            this.newAircraft = _data["newAircraft"] ? AircraftEquipment.fromJS(_data["newAircraft"]) : <any>undefined;
            this.duration = _data["duration"];
            this.arrivalAt = _data["arrivalAt"] ? new Date(_data["arrivalAt"].toString()) : <any>undefined;
            this.departureAt = _data["departureAt"] ? new Date(_data["departureAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FlightStop {
        data = typeof data === 'object' ? data : {};
        let result = new FlightStop();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iataCode"] = this.iataCode;
        data["newAircraft"] = this.newAircraft ? this.newAircraft.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        data["arrivalAt"] = this.arrivalAt ? this.arrivalAt.toISOString() : <any>undefined;
        data["departureAt"] = this.departureAt ? this.departureAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IFlightStop {
    iataCode?: string | undefined;
    newAircraft?: AircraftEquipment | undefined;
    duration?: string | undefined;
    arrivalAt?: Date | undefined;
    departureAt?: Date | undefined;
}

export class PricingDetail implements IPricingDetail {
    travelClass?: TravelClass | undefined;
    fareClass?: string | undefined;
    availability?: number | undefined;
    fareBasis?: string | undefined;

    constructor(data?: IPricingDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.travelClass = _data["travelClass"];
            this.fareClass = _data["fareClass"];
            this.availability = _data["availability"];
            this.fareBasis = _data["fareBasis"];
        }
    }

    static fromJS(data: any): PricingDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PricingDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["travelClass"] = this.travelClass;
        data["fareClass"] = this.fareClass;
        data["availability"] = this.availability;
        data["fareBasis"] = this.fareBasis;
        return data; 
    }
}

export interface IPricingDetail {
    travelClass?: TravelClass | undefined;
    fareClass?: string | undefined;
    availability?: number | undefined;
    fareBasis?: string | undefined;
}

export enum TravelClass {
    ECONOMY = "ECONOMY",
    PREMIUM_ECONOMY = "PREMIUM_ECONOMY",
    BUSINESS = "BUSINESS",
    FIRST = "FIRST",
}

export class Price implements IPrice {
    total?: string | undefined;
    totalTaxes?: string | undefined;

    constructor(data?: IPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            this.totalTaxes = _data["totalTaxes"];
        }
    }

    static fromJS(data: any): Price {
        data = typeof data === 'object' ? data : {};
        let result = new Price();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["totalTaxes"] = this.totalTaxes;
        return data; 
    }
}

export interface IPrice {
    total?: string | undefined;
    totalTaxes?: string | undefined;
}

export class Dictionaries implements IDictionaries {
    carriers?: DictionaryEntry | undefined;
    currencies?: DictionaryEntry | undefined;
    aircraft?: DictionaryEntry | undefined;
    locations?: LocationEntry | undefined;

    constructor(data?: IDictionaries) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carriers = _data["carriers"] ? DictionaryEntry.fromJS(_data["carriers"]) : <any>undefined;
            this.currencies = _data["currencies"] ? DictionaryEntry.fromJS(_data["currencies"]) : <any>undefined;
            this.aircraft = _data["aircraft"] ? DictionaryEntry.fromJS(_data["aircraft"]) : <any>undefined;
            this.locations = _data["locations"] ? LocationEntry.fromJS(_data["locations"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Dictionaries {
        data = typeof data === 'object' ? data : {};
        let result = new Dictionaries();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carriers"] = this.carriers ? this.carriers.toJSON() : <any>undefined;
        data["currencies"] = this.currencies ? this.currencies.toJSON() : <any>undefined;
        data["aircraft"] = this.aircraft ? this.aircraft.toJSON() : <any>undefined;
        data["locations"] = this.locations ? this.locations.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDictionaries {
    carriers?: DictionaryEntry | undefined;
    currencies?: DictionaryEntry | undefined;
    aircraft?: DictionaryEntry | undefined;
    locations?: LocationEntry | undefined;
}

export class DictionaryEntry implements IDictionaryEntry {
    code!: string;

    constructor(data?: IDictionaryEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): DictionaryEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DictionaryEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface IDictionaryEntry {
    code: string;
}

export class LocationEntry implements ILocationEntry {
    key!: string;

    constructor(data?: ILocationEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): LocationEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LocationEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        return data; 
    }
}

export interface ILocationEntry {
    key: string;
}

export class Meta implements IMeta {
    links?: Links | undefined;
    currency?: string | undefined;
    defaults?: Defaults | undefined;

    constructor(data?: IMeta) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? Links.fromJS(_data["links"]) : <any>undefined;
            this.currency = _data["currency"];
            this.defaults = _data["defaults"] ? Defaults.fromJS(_data["defaults"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Meta {
        data = typeof data === 'object' ? data : {};
        let result = new Meta();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["currency"] = this.currency;
        data["defaults"] = this.defaults ? this.defaults.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMeta {
    links?: Links | undefined;
    currency?: string | undefined;
    defaults?: Defaults | undefined;
}

export class Links implements ILinks {
    self?: string | undefined;

    constructor(data?: ILinks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.self = _data["self"];
        }
    }

    static fromJS(data: any): Links {
        data = typeof data === 'object' ? data : {};
        let result = new Links();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        return data; 
    }
}

export interface ILinks {
    self?: string | undefined;
}

export class Defaults implements IDefaults {
    nonStop?: boolean | undefined;
    adults?: number | undefined;

    constructor(data?: IDefaults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nonStop = _data["nonStop"];
            this.adults = _data["adults"];
        }
    }

    static fromJS(data: any): Defaults {
        data = typeof data === 'object' ? data : {};
        let result = new Defaults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nonStop"] = this.nonStop;
        data["adults"] = this.adults;
        return data; 
    }
}

export interface IDefaults {
    nonStop?: boolean | undefined;
    adults?: number | undefined;
}

export class Issue implements IIssue {
    status?: number | undefined;
    code?: number | undefined;
    title?: string | undefined;
    detail?: string | undefined;
    source?: Source | undefined;

    constructor(data?: IIssue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.code = _data["code"];
            this.title = _data["title"];
            this.detail = _data["detail"];
            this.source = _data["source"] ? Source.fromJS(_data["source"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Issue {
        data = typeof data === 'object' ? data : {};
        let result = new Issue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["code"] = this.code;
        data["title"] = this.title;
        data["detail"] = this.detail;
        data["source"] = this.source ? this.source.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIssue {
    status?: number | undefined;
    code?: number | undefined;
    title?: string | undefined;
    detail?: string | undefined;
    source?: Source | undefined;
}

export class Source implements ISource {
    pointer?: string | undefined;
    parameter?: string | undefined;
    example?: string | undefined;

    constructor(data?: ISource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pointer = _data["pointer"];
            this.parameter = _data["parameter"];
            this.example = _data["example"];
        }
    }

    static fromJS(data: any): Source {
        data = typeof data === 'object' ? data : {};
        let result = new Source();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pointer"] = this.pointer;
        data["parameter"] = this.parameter;
        data["example"] = this.example;
        return data; 
    }
}

export interface ISource {
    pointer?: string | undefined;
    parameter?: string | undefined;
    example?: string | undefined;
}

export class Paramz implements IParamz {
    origin?: string | undefined;
    destination?: string | undefined;
    departureDate!: Date;
    returnDate?: Date | undefined;
    arrivalBy?: Date | undefined;
    returnBy?: Date | undefined;
    adults?: number | undefined;
    children?: number | undefined;
    infants?: number | undefined;
    seniors?: number | undefined;
    travelClass?: TravelClass2 | undefined;
    includeAirlines?: string | undefined;
    excludeAirlines?: string | undefined;
    nonStop?: boolean | undefined;
    currency?: string | undefined;
    maxPrice?: number | undefined;
    max?: number | undefined;

    constructor(data?: IParamz) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.origin = _data["origin"];
            this.destination = _data["destination"];
            this.departureDate = _data["departureDate"] ? new Date(_data["departureDate"].toString()) : <any>undefined;
            this.returnDate = _data["returnDate"] ? new Date(_data["returnDate"].toString()) : <any>undefined;
            this.arrivalBy = _data["arrivalBy"] ? new Date(_data["arrivalBy"].toString()) : <any>undefined;
            this.returnBy = _data["returnBy"] ? new Date(_data["returnBy"].toString()) : <any>undefined;
            this.adults = _data["adults"];
            this.children = _data["children"];
            this.infants = _data["infants"];
            this.seniors = _data["seniors"];
            this.travelClass = _data["travelClass"];
            this.includeAirlines = _data["includeAirlines"];
            this.excludeAirlines = _data["excludeAirlines"];
            this.nonStop = _data["nonStop"];
            this.currency = _data["currency"];
            this.maxPrice = _data["maxPrice"];
            this.max = _data["max"];
        }
    }

    static fromJS(data: any): Paramz {
        data = typeof data === 'object' ? data : {};
        let result = new Paramz();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["origin"] = this.origin;
        data["destination"] = this.destination;
        data["departureDate"] = this.departureDate ? this.departureDate.toISOString() : <any>undefined;
        data["returnDate"] = this.returnDate ? this.returnDate.toISOString() : <any>undefined;
        data["arrivalBy"] = this.arrivalBy ? this.arrivalBy.toISOString() : <any>undefined;
        data["returnBy"] = this.returnBy ? this.returnBy.toISOString() : <any>undefined;
        data["adults"] = this.adults;
        data["children"] = this.children;
        data["infants"] = this.infants;
        data["seniors"] = this.seniors;
        data["travelClass"] = this.travelClass;
        data["includeAirlines"] = this.includeAirlines;
        data["excludeAirlines"] = this.excludeAirlines;
        data["nonStop"] = this.nonStop;
        data["currency"] = this.currency;
        data["maxPrice"] = this.maxPrice;
        data["max"] = this.max;
        return data; 
    }
}

export interface IParamz {
    origin?: string | undefined;
    destination?: string | undefined;
    departureDate: Date;
    returnDate?: Date | undefined;
    arrivalBy?: Date | undefined;
    returnBy?: Date | undefined;
    adults?: number | undefined;
    children?: number | undefined;
    infants?: number | undefined;
    seniors?: number | undefined;
    travelClass?: TravelClass2 | undefined;
    includeAirlines?: string | undefined;
    excludeAirlines?: string | undefined;
    nonStop?: boolean | undefined;
    currency?: string | undefined;
    maxPrice?: number | undefined;
    max?: number | undefined;
}

export enum TravelClass2 {
    ECONOMY = 0,
    PREMIUM_ECONOMY = 1,
    BUSINESS = 2,
    FIRST = 3,
}

export class MetaData implements IMetaData {
    name?: string | undefined;
    type?: MetaDataTypeType;

    constructor(data?: IMetaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MetaData {
        data = typeof data === 'object' ? data : {};
        let result = new MetaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }
}
export type MetaDataTypeType = "string" | "number" | "date" | "undefined" | undefined;
export interface IMetaData {
    name?: string | undefined;
    type?: MetaDataTypeType;
}

export class WeatherForecast implements IWeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}