////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//using LoFF.Features.AmClient;

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

//namespace LoFF.Controllers.Base
//{
//    using System = global::System;
    
//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0))")]
//    [Microsoft.AspNetCore.Mvc.Route("v1")]
//    public abstract class ControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
//    {
//        /// <summary>Find the cheapest bookable flights.</summary>
//        /// <param name="origin">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston</param>
//        /// <param name="destination">city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris</param>
//        /// <param name="departureDate">the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25</param>
//        /// <param name="returnDate">the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28</param>
//        /// <param name="arrivalBy">the date and time by which the last flight of the outbound should arrive at the destination. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2016-12-31T23:59</param>
//        /// <param name="returnBy">the date and time by which the last flight of the inbound should arrive at the origin. Datetimes are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm format, e.g. 2017-12-31T12:01</param>
//        /// <param name="adults">the number of adult travelers (age 12 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
//        /// <param name="children">the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0</param>
//        /// <param name="infants">the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult or a senior traveler, and thus the number of infants must not exceed the sum of the number of adults and seniors. If specified, this number should be greater than or equal to 0</param>
//        /// <param name="seniors">the number of senior travelers (age 65 or older on date of departure). If specified, this number should be greater than or equal to 0</param>
//        /// <param name="travelClass">most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class</param>
//        /// <param name="includeAirlines">if specified, the flight offer will include at least one segment per bound marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
//        /// <param name="excludeAirlines">if specified, the flight offer will exclude all the flights marketed by one of these airlines. Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X</param>
//        /// <param name="nonStop">if set to true, the search will find only flights going from the origin to the destination with no stop in between</param>
//        /// <param name="currency">the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
//        /// <param name="maxPrice">maximum price of the flight offers to find, in EUR unless some other currency is specified. By default, no limit is applied. If specified, the value should be a positive number with no decimals</param>
//        /// <param name="max">maximum number of flight offers to return. 
//        /// 
//        /// If specified, the value should be between 1 and 250. When not specified, system uses the default value **50**.</param>
//        /// <returns>Success</returns>
//        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("shopping/flight-offers")]
//        public abstract System.Threading.Tasks.Task<FlightOffers> GetFlightOffers([Microsoft.AspNetCore.Mvc.FromQuery] string origin, [Microsoft.AspNetCore.Mvc.FromQuery] string destination, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset departureDate, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? returnDate, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? arrivalBy, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? returnBy, [Microsoft.AspNetCore.Mvc.FromQuery] int? adults = 1, [Microsoft.AspNetCore.Mvc.FromQuery] int? children = 0, [Microsoft.AspNetCore.Mvc.FromQuery] int? infants = 0, [Microsoft.AspNetCore.Mvc.FromQuery] int? seniors = 0, [Microsoft.AspNetCore.Mvc.FromQuery] TravelClass2? travelClass = 0, [Microsoft.AspNetCore.Mvc.FromQuery] string includeAirlines = null, [Microsoft.AspNetCore.Mvc.FromQuery] string excludeAirlines = null, [Microsoft.AspNetCore.Mvc.FromQuery] bool? nonStop = false, [Microsoft.AspNetCore.Mvc.FromQuery] string currency = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? maxPrice = int.MaxValue, [Microsoft.AspNetCore.Mvc.FromQuery] int? max = 50);
    
//    }

    

//}

//#pragma warning restore 1591
//#pragma warning restore 1573
//#pragma warning restore  472
//#pragma warning restore  114
//#pragma warning restore  108